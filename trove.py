# -*- coding: utf-8 -*-
"""Trove

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z5G7VS6rgImr-1sFmZ6wKuzXWkO4pMSR
"""

!pip install yfinance

import pandas as pd
import numpy as np
import yfinance as yf
import matplotlib.pyplot as plt
import matplotlib.lines as lines

import pandas as pd
import pandas_datareader.data as fin
import plotly.express as px
import numpy as np
import yfinance as yf

# figure2.1
spy_ohlc_df = yf.download('HSU.TO', start='1987-02-01', end='2023-02-01')
sp500 = yf.download('HSU.TO', start='1987-08-17', end='2023-02-01')
sp500.to_csv('sp500.csv')
sp500df = pd.read_csv('sp500.csv', index_col='Date', parse_dates=True)
sp500df.head()

fig = px.line(title='Stock Comparison')
fig.add_scatter(x=sp500df.index, y=sp500df['Close'], mode='lines')

# Add horizontal lines
fig.add_shape(type='line', x0=sp500df.index[0], x1=sp500df.index[-1], y0=-2, y1=-2, line=dict(color='red', width=2, dash='dash'))
fig.add_shape(type='line', x0=sp500df.index[0], x1=sp500df.index[-1], y0=2, y1=2, line=dict(color='red', width=2, dash='dash'))

fig.show()

"""Bulls

"""

import pandas as pd
import pandas_datareader.data as fin
import plotly.express as px
import numpy as np
import yfinance as yf
# figure2.1
spy_ohlc_df = yf.download('HSU.TO', start='1987-02-01', end='2023-02-01')
sp500 = yf.download('HSU.TO', start='1987-08-17', end='2023-02-01')
sp500.to_csv('sp500.csv')
sp500df = pd.read_csv('sp500.csv', index_col='Date', parse_dates=True)
sp500df.head()
fig = px.line(title='Stock Comparison')
fig.add_scatter(x=sp500df.index, y=sp500df['Close'], mode='lines')
# Add horizontal lines
fig.add_shape(type='line', x0=sp500df.index[0], x1=sp500df.index[-1], y0=0.4, y1=0.4, line=dict(color='red', width=2, dash='dash'))
fig.add_shape(type='line', x0=sp500df.index[0], x1=sp500df.index[-1], y0=1.9, y1=1.9, line=dict(color='red', width=2, dash='dash'))
fig.show()

"""SP500 index"""

#figure2.2
spy_ohlc_df = yf.download('SPY', start='1930-02-01', end='2023-02-01')
sp500 = yf.download('SPY', start='1930-08-17', end='2023-02-01')
sp500.to_csv('sp500.csv')
sp500df = pd.read_csv('sp500.csv', index_col='Date', parse_dates=True)
sp500df.head()
fig = px.line(title='Stock Comparison')
fig.add_scatter(x=sp500df.index, y=sp500df['Close'], mode='lines')
# Add horizontal lines
fig.add_shape(type='line', x0=sp500df.index[0], x1=sp500df.index[-1], y0=11, y1=11, line=dict(color='red', width=2, dash='dash'))
fig.add_shape(type='line', x0=sp500df.index[0], x1=sp500df.index[-1], y0=65, y1=65, line=dict(color='red', width=2, dash='dash'))
fig.show()

#sp500
spy_ohlc_df = yf.download('SPY', start='1930-02-01', end='2023-02-01')
sp500 = yf.download('SPY', start='1930-08-17', end='2023-02-01')
sp500.to_csv('sp500.csv')
sp500df = pd.read_csv('sp500.csv', index_col='Date', parse_dates=True)
sp500df.head()
fig = px.line(title='Stock Comparison')
fig.add_scatter(x=sp500df.index, y=sp500df['Close'], mode='lines')
# Add horizontal lines
fig.add_shape(type='line', x0=sp500df.index[0], x1=sp500df.index[-1], y0=56, y1=56, line=dict(color='red', width=2, dash='dash'))
fig.add_shape(type='line', x0=sp500df.index[0], x1=sp500df.index[-1], y0=79, y1=79, line=dict(color='red', width=2, dash='dash'))
fig.show()

"""DJIA"""

# figure2.3
spy_ohlc_df = yf.download('DJI', start='1915-02-01', end='2023-02-01')
sp500 = yf.download('DJI', start='1915-08-17', end='2023-02-01')
sp500.to_csv('sp500.csv')
sp500df = pd.read_csv('sp500.csv', index_col='Date', parse_dates=True)
sp500df.head()
fig = px.line(title='Stock Comparison')
fig.add_scatter(x=sp500df.index, y=sp500df['Close'], mode='lines')
# Add horizontal lines
fig.add_shape(type='line', x0=sp500df.index[0], x1=sp500df.index[-1], y0=42, y1=42, line=dict(color='red', width=2, dash='dash'))
fig.add_shape(type='line', x0=sp500df.index[0], x1=sp500df.index[-1], y0=59, y1=59, line=dict(color='red', width=2, dash='dash'))
fig.add_shape(type='line', x0=sp500df.index[0], x1=sp500df.index[-1], y0=67, y1=67, line=dict(color='red', width=2, dash='dash'))
fig.show()

# figure2.3
spy_ohlc_df = yf.download('DJI', start='1915-02-01', end='2023-02-01')
sp500 = yf.download('DJI', start='1915-08-17', end='2023-02-01')
sp500.to_csv('sp500.csv')
sp500df = pd.read_csv('sp500.csv', index_col='Date', parse_dates=True)
sp500df.head()
fig = px.line(title='Stock Comparison')
fig.add_scatter(x=sp500df.index, y=sp500df['Close'], mode='lines')
# Add horizontal lines
fig.add_shape(type='line', x0=sp500df.index[0], x1=sp500df.index[-1], y0=96, y1=96, line=dict(color='red', width=2, dash='dash'))
fig.add_shape(type='line', x0=sp500df.index[0], x1=sp500df.index[-1], y0=108.2, y1=108.2, line=dict(color='red', width=2, dash='dash'))
# fig.add_shape(type='line', x0=sp500df.index[0], x1=sp500df.index[-1], y0=67, y1=67, line=dict(color='red', width=2, dash='dash'))
fig.show()

"""Moody's"""

#figure2.4
spy_ohlc_df = yf.download('MCO', start='1930-02-01', end='2023-02-01')
sp500 = yf.download('MCO', start='1930-08-17', end='2023-02-01')
sp500.to_csv('sp500.csv')
sp500df = pd.read_csv('sp500.csv', index_col='Date', parse_dates=True)
sp500df.head()
fig = px.line(title='Stock Comparison')
fig.add_scatter(x=sp500df.index, y=sp500df['Close'], mode='lines')
# Add horizontal lines
fig.add_shape(type='line', x0=sp500df.index[0], x1=sp500df.index[-1], y0=-2, y1=-2, line=dict(color='red', width=2, dash='dash'))
fig.add_shape(type='line', x0=sp500df.index[0], x1=sp500df.index[-1], y0=2, y1=2, line=dict(color='red', width=2, dash='dash'))
fig.show()

# daily return of sp500
import pandas_datareader.data as web
import datetime
start = datetime.datetime(2013, 1, 1)
end = datetime.datetime(2023, 2, 26)
SP500 = web.DataReader(['sp500'], 'fred', start, end)
SP500['daily_return'] = (SP500['sp500']/ SP500['sp500'].shift(1)) -1
#Drop all Not a number values using drop method.
SP500.dropna(inplace = True)
SP500['daily_return'].plot(title='S&P 500 daily returns')

#NASDAQ 100days
spy_ohlc_df = yf.download('NQ=F', start='2022-12-01', end='2023-02-01')
sp500 = yf.download('NQ=F', start='2022-12-17', end='2023-02-01')
sp500.to_csv('sp500.csv')
sp500df = pd.read_csv('sp500.csv', index_col='Date', parse_dates=True)
sp500df.head()
fig = px.line(title='Stock Comparison')
fig.add_scatter(x=sp500df.index, y=sp500df['Close'], mode='lines')
# Add horizontal lines
fig.add_shape(type='line', x0=sp500df.index[0], x1=sp500df.index[-1], y0=-2, y1=-2, line=dict(color='red', width=2, dash='dash'))
fig.add_shape(type='line', x0=sp500df.index[0], x1=sp500df.index[-1], y0=2, y1=2, line=dict(color='red', width=2, dash='dash'))
fig.show()

#NASDAQ 200days
spy_ohlc_df = yf.download('NQ=F', start='2022-05-01', end='2023-02-01')
sp500 = yf.download('NQ=F', start='2022-05-17', end='2023-02-01')
sp500.to_csv('sp500.csv')
sp500df = pd.read_csv('sp500.csv', index_col='Date', parse_dates=True)
sp500df.head()
fig = px.line(title='Stock Comparison')
fig.add_scatter(x=sp500df.index, y=sp500df['Close'], mode='lines')
# Add horizontal lines
#fig.add_shape(type='line', x0=sp500df.index[0], x1=sp500df.index[-1], y0=-2, y1=-2, line=dict(color='red', width=2, dash='dash'))
#fig.add_shape(type='line', x0=sp500df.index[0], x1=sp500df.index[-1], y0=2, y1=2, line=dict(color='red', width=2, dash='dash'))
fig.show()

#SP500 short term
# SP500 long term åœ¨ figure1
spy_ohlc_df = yf.download('HUV.TO', start='2020-02-01', end='2023-02-01')
sp500 = yf.download('HUV.TO', start='2020-08-17', end='2023-02-01')
sp500.to_csv('sp500.csv')
sp500df = pd.read_csv('sp500.csv', index_col='Date', parse_dates=True)
sp500df.head()
fig = px.line(title='Stock Comparison')
fig.add_scatter(x=sp500df.index, y=sp500df['Close'], mode='lines')
# Add horizontal lines
fig.add_shape(type='line', x0=sp500df.index[0], x1=sp500df.index[-1], y0=50, y1=50, line=dict(color='red', width=2, dash='dash'))
fig.add_shape(type='line', x0=sp500df.index[0], x1=sp500df.index[-1], y0=66, y1=66, line=dict(color='red', width=2, dash='dash'))
fig.show()

#economic indictors
import pandas as pd 
import requests 
import json 
import plotly.graph_objects as go

def checkindicator(url):
    r= requests.get(url)
    r = r.json()
    periods = r['series']['docs'][0]['period']
    values = r['series']['docs'][0]['value']
    dataset = r['series']['docs'][0]['dataset_name']
    indicators = pd.DataFrame(values,index=periods)
    indicators.columns = [dataset]
    return indicators

interest = checkindicator('https://api.db.nomics.world/v22/series/Eurostat/ei_mfir_m/M.NSA.NAP.MF-LTGBY-RT.EU28?observations=1')

euro_yields_10y = checkindicator('https://api.db.nomics.world/v22/series/Eurostat/irt_euryld_m/M.EA.INS_FWD.CGB_EA.Y10?observations=1')
unemployment = checkindicator('https://api.db.nomics.world/v22/series/Eurostat/une_rt_m/M.NSA.TOTAL.PC_ACT.T.EA19?observations=1')
interest = checkindicator('https://api.db.nomics.world/v22/series/Eurostat/ei_mfir_m/M.NSA.NAP.MF-LTGBY-RT.EU28?observations=1')

import plotly.graph_objects as go
fig = go.Figure()
fig.add_trace(go.Scatter(
                x=interest.index,
                y=interest['Interest rates - monthly data'],
                name="interest",
                line_color='deepskyblue',
                opacity=0.8))
fig.update_layout(xaxis_range=['2003-07-01','2020-12-31'],
                  title_text="Interest Rates, Unemployment, 10y    yields, inflation UE, volume sales",xaxis_rangeslider_visible=True)
# Add horizontal lines
fig.add_shape(type='line', x0=sp500df.index[0], x1=sp500df.index[-1], y0=-2, y1=-2, line=dict(color='red', width=2, dash='dash'))
fig.add_shape(type='line', x0=sp500df.index[0], x1=sp500df.index[-1], y0=2, y1=2, line=dict(color='red', width=2, dash='dash'))
fig.show()

# momentum
# import required libraries
import pandas as pd
import yfinance as yf
import numpy as np
import math 
# parameter setup (default values in the original indicator)
length = 20
mult = 2
length_KC = 20
mult_KC = 1.5
# get stock prices
df = yf.download('AAPL', start='2020-01-01', threads= False)

# calculate Bollinger Bands
# moving average
m_avg = df['Close'].rolling(window=length).mean()
# standard deviation
m_std = df['Close'].rolling(window=length).std(ddof=0)
# upper Bollinger Bands
df['upper_BB'] = m_avg + mult * m_std
# lower Bollinger Bands 
df['lower_BB'] = m_avg - mult * m_std

# calculate Keltner Channel
# first we need to calculate True Range
df['tr0'] = abs(df["High"] - df["Low"])
df['tr1'] = abs(df["High"] - df["Close"].shift())
df['tr2'] = abs(df["Low"] - df["Close"].shift())
df['tr'] = df[['tr0', 'tr1', 'tr2']].max(axis=1)
# moving average of the TR
range_ma = df['tr'].rolling(window=length_KC).mean()
# upper Keltner Channel
df['upper_KC'] = m_avg + range_ma * mult_KC
# lower Keltner Channel
df['lower_KC'] = m_avg - range_ma * mult_KC

# check for 'squeeze'
df['squeeze_on'] = (df['lower_BB'] > df['lower_KC']) & (df['upper_BB'] < df['upper_KC'])
df['squeeze_off'] = (df['lower_BB'] < df['lower_KC']) & (df['upper_BB'] > df['upper_KC'])

# calculate momentum value
highest = df['High'].rolling(window = length_KC).max()
lowest = df['Low'].rolling(window = length_KC).min()
m1 = (highest + lowest) / 2
df['value'] = (df['Close'] - (m1 + m_avg)/2)
fit_y = np.array(range(0,length_KC))
df['value'] = df['value'].rolling(window = length_KC).apply(lambda x : np.polyfit(fit_y, x, 1)[0] * (length_KC-1) +
   np.polyfit(fit_y, x, 1)[1], raw=True)

# entry point for long position:
# 1. black cross becomes gray (the squeeze is released)
long_cond1 = (df['squeeze_off'][-2] == False) & (df['squeeze_off'][-1] == True) 
# 2. bar value is positive => the bar is light green
long_cond2 = df['value'][-1] > 0
enter_long = long_cond1 and long_cond2
# entry point for short position:
# 1. black cross becomes gray (the squeeze is released)
short_cond1 = (df['squeeze_off'][-2] == False) & (df['squeeze_off'][-1] == True) 
# 2. bar value is negative => the bar is light red 
short_cond2 = df['value'][-1] < 0
enter_short = short_cond1 and short_cond2

# import required libraries
import pandas as pd
import yfinance as yf
import numpy as np
import math

# get stock prices
df = yf.download('AAPL', start='2020-01-01', threads= False)

# parameter setup
length = 20
mult = 2
length_KC = 20
mult_KC = 1.5

# calculate BB
m_avg = df['Close'].rolling(window=length).mean()
m_std = df['Close'].rolling(window=length).std(ddof=0)
df['upper_BB'] = m_avg + mult * m_std
df['lower_BB'] = m_avg - mult * m_std

# calculate true range
df['tr0'] = abs(df["High"] - df["Low"])
df['tr1'] = abs(df["High"] - df["Close"].shift())
df['tr2'] = abs(df["Low"] - df["Close"].shift())
df['tr'] = df[['tr0', 'tr1', 'tr2']].max(axis=1)

# calculate KC
range_ma = df['tr'].rolling(window=length_KC).mean()
df['upper_KC'] = m_avg + range_ma * mult_KC
df['lower_KC'] = m_avg - range_ma * mult_KC

# calculate bar value
highest = df['High'].rolling(window = length_KC).max()
lowest = df['Low'].rolling(window = length_KC).min()
m1 = (highest + lowest)/2
df['value'] = (df['Close'] - (m1 + m_avg)/2)
fit_y = np.array(range(0,length_KC))
df['value'] = df['value'].rolling(window = length_KC).apply(lambda x: 
                          np.polyfit(fit_y, x, 1)[0] * (length_KC-1) + 
                          np.polyfit(fit_y, x, 1)[1], raw=True)

# check for 'squeeze'
df['squeeze_on'] = (df['lower_BB'] > df['lower_KC']) & (df['upper_BB'] < df['upper_KC'])
df['squeeze_off'] = (df['lower_BB'] < df['lower_KC']) & (df['upper_BB'] > df['upper_KC'])

# buying window for long position:
# 1. black cross becomes gray (the squeeze is released)
long_cond1 = (df['squeeze_off'][-2] == False) & (df['squeeze_off'][-1] == True) 
# 2. bar value is positive => the bar is light green k
long_cond2 = df['value'][-1] > 0
enter_long = long_cond1 and long_cond2

# buying window for short position:
# 1. black cross becomes gray (the squeeze is released)
short_cond1 = (df['squeeze_off'][-2] == False) & (df['squeeze_off'][-1] == True) 
# 2. bar value is negative => the bar is light red 
short_cond2 = df['value'][-1] < 0
enter_short = short_cond1 and short_cond2

pip install mplfinance

# we are using mplfinance to help us visualize the indicator
import mplfinance as mpf

# to make the visualization better by only taking the last 100 rows of data
df = df[-100:]

# extract only ['Open', 'High', 'Close', 'Low'] from df
ohcl = df[['Open', 'High', 'Close', 'Low']]

# add colors for the 'value bar'
colors = []
for ind, val in enumerate(df['value']):
  if val >= 0:
    color = 'green'
    if val > df['value'][ind-1]:
      color = 'lime'
  else:
    color = 'maroon'
    if val < df['value'][ind-1]:
      color='red'
  colors.append(color)
  
# add 2 subplots: 1. bars, 2. crosses
apds = [mpf.make_addplot(df['value'], panel=1, type='bar', color=colors, alpha=0.8, secondary_y=False),
        mpf.make_addplot([0] * len(df), panel=1, type='scatter', marker='x', markersize=50, color=['gray' if s else 'black' for s in df['squeeze_off']], secondary_y=False)]

# plot ohcl with subplots
fig, axes = mpf.plot(ohcl, 
              volume_panel = 2,
              figratio=(2,1),
              figscale=1, 
              type='candle', 
              addplot=apds,
              returnfig=True)

screened_list = []
stock_list = ['AAPL','TSLA','MSFT','AMZN']
for stock_code in stock_list:
  # get stock prices
  df = yf.download(stock_code, start='2020-01-01', threads= False)
  
  # put all the previous codes (line 10-59) here
  
  if enter_long | enter_short:
    screened_list.append(stock_code)
if screened_list:
  print(screened_list)
else:
  print('No stock fits the indicator entry requirement')